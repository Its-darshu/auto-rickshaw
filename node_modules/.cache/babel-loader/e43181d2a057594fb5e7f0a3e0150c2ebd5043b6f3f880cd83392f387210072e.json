{"ast":null,"code":"import _objectSpread from\"D:/proj/auto-rickshaw/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import{collection,addDoc,updateDoc,deleteDoc,doc,onSnapshot,query,orderBy,getDocs,writeBatch}from'firebase/firestore';import{db}from'../config/firebase';import{jsx as _jsx}from\"react/jsx-runtime\";const DataContext=/*#__PURE__*/createContext(undefined);export const useData=()=>{const context=useContext(DataContext);if(!context){throw new Error('useData must be used within a DataProvider');}return context;};// Firestore collections\nconst DRIVERS_COLLECTION='drivers';const STAGES_COLLECTION='stages';export const DataProvider=_ref=>{let{children}=_ref;const[drivers,setDrivers]=useState([]);const[stages,setStages]=useState([]);const[loading,setLoading]=useState(true);// Real-time listeners for Firestore data\nuseEffect(()=>{// Listen to stages changes\nconst stagesQuery=query(collection(db,STAGES_COLLECTION),orderBy('name'));const unsubscribeStages=onSnapshot(stagesQuery,snapshot=>{const stagesData=[];snapshot.forEach(doc=>{stagesData.push(_objectSpread({id:doc.id},doc.data()));});setStages(stagesData);setLoading(false);});// Listen to drivers changes\nconst driversQuery=query(collection(db,DRIVERS_COLLECTION),orderBy('name'));const unsubscribeDrivers=onSnapshot(driversQuery,snapshot=>{const driversData=[];snapshot.forEach(doc=>{driversData.push(_objectSpread({id:doc.id},doc.data()));});setDrivers(driversData);});// Cleanup listeners\nreturn()=>{unsubscribeStages();unsubscribeDrivers();};},[]);const addDriver=async newDriver=>{try{await addDoc(collection(db,DRIVERS_COLLECTION),_objectSpread(_objectSpread({},newDriver),{},{createdAt:new Date()}));}catch(error){console.error('Error adding driver:',error);throw error;}};const updateDriver=async(id,updatedDriver)=>{try{const driverRef=doc(db,DRIVERS_COLLECTION,id);await updateDoc(driverRef,_objectSpread(_objectSpread({},updatedDriver),{},{updatedAt:new Date()}));}catch(error){console.error('Error updating driver:',error);throw error;}};const deleteDriver=async id=>{try{const driverRef=doc(db,DRIVERS_COLLECTION,id);await deleteDoc(driverRef);}catch(error){console.error('Error deleting driver:',error);throw error;}};const addStage=async newStage=>{try{await addDoc(collection(db,STAGES_COLLECTION),_objectSpread(_objectSpread({},newStage),{},{createdAt:new Date()}));}catch(error){console.error('Error adding stage:',error);throw error;}};const updateStage=async(id,updatedStage)=>{try{const stageRef=doc(db,STAGES_COLLECTION,id);await updateDoc(stageRef,_objectSpread(_objectSpread({},updatedStage),{},{updatedAt:new Date()}));}catch(error){console.error('Error updating stage:',error);throw error;}};const deleteStage=async id=>{try{const batch=writeBatch(db);// Delete the stage\nconst stageRef=doc(db,STAGES_COLLECTION,id);batch.delete(stageRef);// Delete all drivers from this stage\nconst driversToDelete=drivers.filter(driver=>driver.stageId===id);driversToDelete.forEach(driver=>{const driverRef=doc(db,DRIVERS_COLLECTION,driver.id);batch.delete(driverRef);});await batch.commit();}catch(error){console.error('Error deleting stage:',error);throw error;}};const getDriversByStage=stageId=>{return drivers.filter(driver=>driver.stageId===stageId);};const getEmergencyDrivers=()=>{return drivers.filter(driver=>driver.isEmergency);};const searchDrivers=query=>{if(!query.trim())return[];const lowerQuery=query.toLowerCase();return drivers.filter(driver=>driver.name.toLowerCase().includes(lowerQuery)||driver.phoneNumber.includes(query)||driver.vehicleNumber.toLowerCase().includes(lowerQuery));};const initializeSampleData=async()=>{try{// Check if data already exists\nconst stagesSnapshot=await getDocs(collection(db,STAGES_COLLECTION));if(!stagesSnapshot.empty){console.log('Sample data already exists, skipping initialization');return;}console.log('Initializing sample data...');const batch=writeBatch(db);// Sample stages\nconst sampleStages=[{name:'Bus Stand',nameKn:'ಬಸ್ ಸ್ಟಾಂಡ್',latitude:12.9716,longitude:77.5946},{name:'Market',nameKn:'ಮಾರುಕಟ್ಟೆ',latitude:12.9726,longitude:77.5956},{name:'Hospital',nameKn:'ಆಸ್ಪತ್ರೆ',latitude:12.9736,longitude:77.5966},{name:'School',nameKn:'ಶಾಲೆ',latitude:12.9746,longitude:77.5976},{name:'Temple',nameKn:'ದೇವಸ್ಥಾನ',latitude:12.9756,longitude:77.5986}];// Add stages first\nconst stageRefs={};sampleStages.forEach((stage,index)=>{const stageRef=doc(collection(db,STAGES_COLLECTION));stageRefs[\"stage\".concat(index+1)]=stageRef.id;batch.set(stageRef,_objectSpread(_objectSpread({},stage),{},{createdAt:new Date()}));});await batch.commit();// Wait a moment for stages to be created\nawait new Promise(resolve=>setTimeout(resolve,1000));// Then add sample drivers\nconst driversBatch=writeBatch(db);const sampleDrivers=[{name:'Rajesh Kumar',phoneNumber:'+919876543210',vehicleNumber:'KA-01-AB-1234',stageId:stageRefs.stage1,isEmergency:true,whatsappNumber:'+919876543210'},{name:'Suresh Gowda',phoneNumber:'+919876543211',vehicleNumber:'KA-01-AB-1235',stageId:stageRefs.stage1,isEmergency:false,whatsappNumber:'+919876543211'},{name:'Manjunath',phoneNumber:'+919876543212',vehicleNumber:'KA-01-AB-1236',stageId:stageRefs.stage2,isEmergency:true,whatsappNumber:'+919876543212'}];sampleDrivers.forEach(driver=>{const driverRef=doc(collection(db,DRIVERS_COLLECTION));driversBatch.set(driverRef,_objectSpread(_objectSpread({},driver),{},{createdAt:new Date()}));});await driversBatch.commit();console.log('Sample data initialized successfully');}catch(error){console.error('Error initializing sample data:',error);}};return/*#__PURE__*/_jsx(DataContext.Provider,{value:{drivers,stages,loading,addDriver,updateDriver,deleteDriver,addStage,updateStage,deleteStage,getDriversByStage,getEmergencyDrivers,searchDrivers,initializeSampleData},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","collection","addDoc","updateDoc","deleteDoc","doc","onSnapshot","query","orderBy","getDocs","writeBatch","db","jsx","_jsx","DataContext","undefined","useData","context","Error","DRIVERS_COLLECTION","STAGES_COLLECTION","DataProvider","_ref","children","drivers","setDrivers","stages","setStages","loading","setLoading","stagesQuery","unsubscribeStages","snapshot","stagesData","forEach","push","_objectSpread","id","data","driversQuery","unsubscribeDrivers","driversData","addDriver","newDriver","createdAt","Date","error","console","updateDriver","updatedDriver","driverRef","updatedAt","deleteDriver","addStage","newStage","updateStage","updatedStage","stageRef","deleteStage","batch","delete","driversToDelete","filter","driver","stageId","commit","getDriversByStage","getEmergencyDrivers","isEmergency","searchDrivers","trim","lowerQuery","toLowerCase","name","includes","phoneNumber","vehicleNumber","initializeSampleData","stagesSnapshot","empty","log","sampleStages","nameKn","latitude","longitude","stageRefs","stage","index","concat","set","Promise","resolve","setTimeout","driversBatch","sampleDrivers","stage1","whatsappNumber","stage2","Provider","value"],"sources":["D:/proj/auto-rickshaw/src/context/DataContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { \r\n  collection, \r\n  addDoc, \r\n  updateDoc, \r\n  deleteDoc, \r\n  doc, \r\n  onSnapshot, \r\n  query, \r\n  orderBy,\r\n  getDocs,\r\n  writeBatch\r\n} from 'firebase/firestore';\r\nimport { db } from '../config/firebase';\r\n\r\nexport interface Driver {\r\n  id: string;\r\n  name: string;\r\n  phoneNumber: string;\r\n  vehicleNumber: string;\r\n  stageId: string;\r\n  isEmergency: boolean;\r\n  whatsappNumber?: string;\r\n}\r\n\r\nexport interface Stage {\r\n  id: string;\r\n  name: string;\r\n  nameKn: string;\r\n  latitude?: number;\r\n  longitude?: number;\r\n}\r\n\r\ninterface DataContextType {\r\n  drivers: Driver[];\r\n  stages: Stage[];\r\n  loading: boolean;\r\n  addDriver: (driver: Omit<Driver, 'id'>) => Promise<void>;\r\n  updateDriver: (id: string, driver: Partial<Driver>) => Promise<void>;\r\n  deleteDriver: (id: string) => Promise<void>;\r\n  addStage: (stage: Omit<Stage, 'id'>) => Promise<void>;\r\n  updateStage: (id: string, stage: Partial<Stage>) => Promise<void>;\r\n  deleteStage: (id: string) => Promise<void>;\r\n  getDriversByStage: (stageId: string) => Driver[];\r\n  getEmergencyDrivers: () => Driver[];\r\n  searchDrivers: (query: string) => Driver[];\r\n  initializeSampleData: () => Promise<void>;\r\n}\r\n\r\nconst DataContext = createContext<DataContextType | undefined>(undefined);\r\n\r\nexport const useData = () => {\r\n  const context = useContext(DataContext);\r\n  if (!context) {\r\n    throw new Error('useData must be used within a DataProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface DataProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// Firestore collections\r\nconst DRIVERS_COLLECTION = 'drivers';\r\nconst STAGES_COLLECTION = 'stages';\r\n\r\nexport const DataProvider: React.FC<DataProviderProps> = ({ children }) => {\r\n  const [drivers, setDrivers] = useState<Driver[]>([]);\r\n  const [stages, setStages] = useState<Stage[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Real-time listeners for Firestore data\r\n  useEffect(() => {\r\n    // Listen to stages changes\r\n    const stagesQuery = query(collection(db, STAGES_COLLECTION), orderBy('name'));\r\n    const unsubscribeStages = onSnapshot(stagesQuery, (snapshot) => {\r\n      const stagesData: Stage[] = [];\r\n      snapshot.forEach((doc) => {\r\n        stagesData.push({ id: doc.id, ...doc.data() } as Stage);\r\n      });\r\n      setStages(stagesData);\r\n      setLoading(false);\r\n    });\r\n\r\n    // Listen to drivers changes\r\n    const driversQuery = query(collection(db, DRIVERS_COLLECTION), orderBy('name'));\r\n    const unsubscribeDrivers = onSnapshot(driversQuery, (snapshot) => {\r\n      const driversData: Driver[] = [];\r\n      snapshot.forEach((doc) => {\r\n        driversData.push({ id: doc.id, ...doc.data() } as Driver);\r\n      });\r\n      setDrivers(driversData);\r\n    });\r\n\r\n    // Cleanup listeners\r\n    return () => {\r\n      unsubscribeStages();\r\n      unsubscribeDrivers();\r\n    };\r\n  }, []);\r\n\r\n  const addDriver = async (newDriver: Omit<Driver, 'id'>) => {\r\n    try {\r\n      await addDoc(collection(db, DRIVERS_COLLECTION), {\r\n        ...newDriver,\r\n        createdAt: new Date(),\r\n      });\r\n    } catch (error) {\r\n      console.error('Error adding driver:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateDriver = async (id: string, updatedDriver: Partial<Driver>) => {\r\n    try {\r\n      const driverRef = doc(db, DRIVERS_COLLECTION, id);\r\n      await updateDoc(driverRef, {\r\n        ...updatedDriver,\r\n        updatedAt: new Date(),\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating driver:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const deleteDriver = async (id: string) => {\r\n    try {\r\n      const driverRef = doc(db, DRIVERS_COLLECTION, id);\r\n      await deleteDoc(driverRef);\r\n    } catch (error) {\r\n      console.error('Error deleting driver:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const addStage = async (newStage: Omit<Stage, 'id'>) => {\r\n    try {\r\n      await addDoc(collection(db, STAGES_COLLECTION), {\r\n        ...newStage,\r\n        createdAt: new Date(),\r\n      });\r\n    } catch (error) {\r\n      console.error('Error adding stage:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateStage = async (id: string, updatedStage: Partial<Stage>) => {\r\n    try {\r\n      const stageRef = doc(db, STAGES_COLLECTION, id);\r\n      await updateDoc(stageRef, {\r\n        ...updatedStage,\r\n        updatedAt: new Date(),\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating stage:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const deleteStage = async (id: string) => {\r\n    try {\r\n      const batch = writeBatch(db);\r\n      \r\n      // Delete the stage\r\n      const stageRef = doc(db, STAGES_COLLECTION, id);\r\n      batch.delete(stageRef);\r\n      \r\n      // Delete all drivers from this stage\r\n      const driversToDelete = drivers.filter(driver => driver.stageId === id);\r\n      driversToDelete.forEach(driver => {\r\n        const driverRef = doc(db, DRIVERS_COLLECTION, driver.id);\r\n        batch.delete(driverRef);\r\n      });\r\n      \r\n      await batch.commit();\r\n    } catch (error) {\r\n      console.error('Error deleting stage:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const getDriversByStage = (stageId: string): Driver[] => {\r\n    return drivers.filter(driver => driver.stageId === stageId);\r\n  };\r\n\r\n  const getEmergencyDrivers = (): Driver[] => {\r\n    return drivers.filter(driver => driver.isEmergency);\r\n  };\r\n\r\n  const searchDrivers = (query: string): Driver[] => {\r\n    if (!query.trim()) return [];\r\n    \r\n    const lowerQuery = query.toLowerCase();\r\n    return drivers.filter(driver =>\r\n      driver.name.toLowerCase().includes(lowerQuery) ||\r\n      driver.phoneNumber.includes(query) ||\r\n      driver.vehicleNumber.toLowerCase().includes(lowerQuery)\r\n    );\r\n  };\r\n\r\n  const initializeSampleData = async () => {\r\n    try {\r\n      // Check if data already exists\r\n      const stagesSnapshot = await getDocs(collection(db, STAGES_COLLECTION));\r\n      if (!stagesSnapshot.empty) {\r\n        console.log('Sample data already exists, skipping initialization');\r\n        return;\r\n      }\r\n\r\n      console.log('Initializing sample data...');\r\n      const batch = writeBatch(db);\r\n\r\n      // Sample stages\r\n      const sampleStages = [\r\n        { name: 'Bus Stand', nameKn: 'ಬಸ್ ಸ್ಟಾಂಡ್', latitude: 12.9716, longitude: 77.5946 },\r\n        { name: 'Market', nameKn: 'ಮಾರುಕಟ್ಟೆ', latitude: 12.9726, longitude: 77.5956 },\r\n        { name: 'Hospital', nameKn: 'ಆಸ್ಪತ್ರೆ', latitude: 12.9736, longitude: 77.5966 },\r\n        { name: 'School', nameKn: 'ಶಾಲೆ', latitude: 12.9746, longitude: 77.5976 },\r\n        { name: 'Temple', nameKn: 'ದೇವಸ್ಥಾನ', latitude: 12.9756, longitude: 77.5986 },\r\n      ];\r\n\r\n      // Add stages first\r\n      const stageRefs: { [key: string]: string } = {};\r\n      sampleStages.forEach((stage, index) => {\r\n        const stageRef = doc(collection(db, STAGES_COLLECTION));\r\n        stageRefs[`stage${index + 1}`] = stageRef.id;\r\n        batch.set(stageRef, { ...stage, createdAt: new Date() });\r\n      });\r\n\r\n      await batch.commit();\r\n\r\n      // Wait a moment for stages to be created\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      // Then add sample drivers\r\n      const driversBatch = writeBatch(db);\r\n      const sampleDrivers = [\r\n        {\r\n          name: 'Rajesh Kumar',\r\n          phoneNumber: '+919876543210',\r\n          vehicleNumber: 'KA-01-AB-1234',\r\n          stageId: stageRefs.stage1,\r\n          isEmergency: true,\r\n          whatsappNumber: '+919876543210'\r\n        },\r\n        {\r\n          name: 'Suresh Gowda',\r\n          phoneNumber: '+919876543211',\r\n          vehicleNumber: 'KA-01-AB-1235',\r\n          stageId: stageRefs.stage1,\r\n          isEmergency: false,\r\n          whatsappNumber: '+919876543211'\r\n        },\r\n        {\r\n          name: 'Manjunath',\r\n          phoneNumber: '+919876543212',\r\n          vehicleNumber: 'KA-01-AB-1236',\r\n          stageId: stageRefs.stage2,\r\n          isEmergency: true,\r\n          whatsappNumber: '+919876543212'\r\n        }\r\n      ];\r\n\r\n      sampleDrivers.forEach(driver => {\r\n        const driverRef = doc(collection(db, DRIVERS_COLLECTION));\r\n        driversBatch.set(driverRef, { ...driver, createdAt: new Date() });\r\n      });\r\n\r\n      await driversBatch.commit();\r\n      console.log('Sample data initialized successfully');\r\n    } catch (error) {\r\n      console.error('Error initializing sample data:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DataContext.Provider\r\n      value={{\r\n        drivers,\r\n        stages,\r\n        loading,\r\n        addDriver,\r\n        updateDriver,\r\n        deleteDriver,\r\n        addStage,\r\n        updateStage,\r\n        deleteStage,\r\n        getDriversByStage,\r\n        getEmergencyDrivers,\r\n        searchDrivers,\r\n        initializeSampleData,\r\n      }}\r\n    >\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}