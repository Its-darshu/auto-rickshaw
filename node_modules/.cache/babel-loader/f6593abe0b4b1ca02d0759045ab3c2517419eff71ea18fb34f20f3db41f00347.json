{"ast":null,"code":"var _jsxFileName = \"D:\\\\proj\\\\auto-rickshaw\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { signInWithPopup, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { auth, googleProvider } from '../config/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// List of admin email addresses (in production, store this in Firebase or a secure database)\nconst ADMIN_EMAILS = ['darshan99806@gmail.com', 'admin@villageautoconnect.com'\n// Add more admin emails as needed\n];\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const signInWithGoogle = async () => {\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      const user = result.user;\n\n      // Check if user is admin\n      if (ADMIN_EMAILS.indexOf(user.email || '') === -1) {\n        await signOut(auth);\n        throw new Error('Access denied. Only authorized administrators can access this panel.');\n      }\n      console.log('Admin signed in:', user.email);\n    } catch (error) {\n      console.error('Google sign-in error:', error);\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      await signOut(auth);\n    } catch (error) {\n      console.error('Logout error:', error);\n      throw error;\n    }\n  };\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      // Only set user if they are an admin\n      if (user && ADMIN_EMAILS.indexOf(user.email || '') !== -1) {\n        setCurrentUser(user);\n      } else {\n        setCurrentUser(null);\n        // If non-admin tries to stay signed in, sign them out\n        if (user && ADMIN_EMAILS.indexOf(user.email || '') === -1) {\n          signOut(auth);\n        }\n      }\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const isAdmin = currentUser !== null && ADMIN_EMAILS.indexOf(currentUser.email || '') !== -1;\n  const value = {\n    currentUser,\n    loading,\n    signInWithGoogle,\n    logout,\n    isAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","signInWithPopup","signOut","onAuthStateChanged","auth","googleProvider","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","ADMIN_EMAILS","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","signInWithGoogle","result","user","indexOf","email","console","log","error","logout","unsubscribe","isAdmin","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/proj/auto-rickshaw/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { \r\n  User, \r\n  signInWithPopup, \r\n  signOut, \r\n  onAuthStateChanged,\r\n  GoogleAuthProvider\r\n} from 'firebase/auth';\r\nimport { auth, googleProvider } from '../config/firebase';\r\n\r\ninterface AuthContextType {\r\n  currentUser: User | null;\r\n  loading: boolean;\r\n  signInWithGoogle: () => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  isAdmin: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// List of admin email addresses (in production, store this in Firebase or a secure database)\r\nconst ADMIN_EMAILS = [\r\n  'darshan99806@gmail.com',\r\n  'admin@villageautoconnect.com',\r\n  // Add more admin emails as needed\r\n];\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const signInWithGoogle = async (): Promise<void> => {\r\n    try {\r\n      const result = await signInWithPopup(auth, googleProvider);\r\n      const user = result.user;\r\n      \r\n      // Check if user is admin\r\n      if (ADMIN_EMAILS.indexOf(user.email || '') === -1) {\r\n        await signOut(auth);\r\n        throw new Error('Access denied. Only authorized administrators can access this panel.');\r\n      }\r\n      \r\n      console.log('Admin signed in:', user.email);\r\n    } catch (error: any) {\r\n      console.error('Google sign-in error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = async (): Promise<void> => {\r\n    try {\r\n      await signOut(auth);\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n      // Only set user if they are an admin\r\n      if (user && ADMIN_EMAILS.indexOf(user.email || '') !== -1) {\r\n        setCurrentUser(user);\r\n      } else {\r\n        setCurrentUser(null);\r\n        // If non-admin tries to stay signed in, sign them out\r\n        if (user && ADMIN_EMAILS.indexOf(user.email || '') === -1) {\r\n          signOut(auth);\r\n        }\r\n      }\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const isAdmin = currentUser !== null && ADMIN_EMAILS.indexOf(currentUser.email || '') !== -1;\r\n\r\n  const value: AuthContextType = {\r\n    currentUser,\r\n    loading,\r\n    signInWithGoogle,\r\n    logout,\r\n    isAdmin\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}