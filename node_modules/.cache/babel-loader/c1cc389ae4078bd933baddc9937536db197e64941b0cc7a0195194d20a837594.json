{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{signInWithPopup,signOut,onAuthStateChanged}from'firebase/auth';import{auth,googleProvider}from'../config/firebase';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};// List of admin email addresses (in production, store this in Firebase or a secure database)\nconst ADMIN_EMAILS=['darshan99806@gmail.com','admin@villageautoconnect.com'// Add more admin emails as needed\n];export const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);const signInWithGoogle=async()=>{try{const result=await signInWithPopup(auth,googleProvider);const user=result.user;// Check if user is admin\nif(ADMIN_EMAILS.indexOf(user.email||'')===-1){await signOut(auth);throw new Error('Access denied. Only authorized administrators can access this panel.');}console.log('Admin signed in:',user.email);}catch(error){console.error('Google sign-in error:',error);throw error;}};const logout=async()=>{try{await signOut(auth);}catch(error){console.error('Logout error:',error);throw error;}};useEffect(()=>{const unsubscribe=onAuthStateChanged(auth,user=>{// Only set user if they are an admin\nif(user&&ADMIN_EMAILS.indexOf(user.email||'')!==-1){setCurrentUser(user);}else{setCurrentUser(null);// If non-admin tries to stay signed in, sign them out\nif(user&&ADMIN_EMAILS.indexOf(user.email||'')===-1){signOut(auth);}}setLoading(false);});return unsubscribe;},[]);const isAdmin=currentUser!==null&&ADMIN_EMAILS.indexOf(currentUser.email||'')!==-1;const value={currentUser,loading,signInWithGoogle,logout,isAdmin};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:!loading&&children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","signInWithPopup","signOut","onAuthStateChanged","auth","googleProvider","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","ADMIN_EMAILS","AuthProvider","_ref","children","currentUser","setCurrentUser","loading","setLoading","signInWithGoogle","result","user","indexOf","email","console","log","error","logout","unsubscribe","isAdmin","value","Provider"],"sources":["D:/proj/auto-rickshaw/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { \r\n  User, \r\n  signInWithPopup, \r\n  signOut, \r\n  onAuthStateChanged,\r\n  GoogleAuthProvider\r\n} from 'firebase/auth';\r\nimport { auth, googleProvider } from '../config/firebase';\r\n\r\ninterface AuthContextType {\r\n  currentUser: User | null;\r\n  loading: boolean;\r\n  signInWithGoogle: () => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  isAdmin: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// List of admin email addresses (in production, store this in Firebase or a secure database)\r\nconst ADMIN_EMAILS = [\r\n  'darshan99806@gmail.com',\r\n  'admin@villageautoconnect.com',\r\n  // Add more admin emails as needed\r\n];\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const signInWithGoogle = async (): Promise<void> => {\r\n    try {\r\n      const result = await signInWithPopup(auth, googleProvider);\r\n      const user = result.user;\r\n      \r\n      // Check if user is admin\r\n      if (ADMIN_EMAILS.indexOf(user.email || '') === -1) {\r\n        await signOut(auth);\r\n        throw new Error('Access denied. Only authorized administrators can access this panel.');\r\n      }\r\n      \r\n      console.log('Admin signed in:', user.email);\r\n    } catch (error: any) {\r\n      console.error('Google sign-in error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = async (): Promise<void> => {\r\n    try {\r\n      await signOut(auth);\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n      // Only set user if they are an admin\r\n      if (user && ADMIN_EMAILS.indexOf(user.email || '') !== -1) {\r\n        setCurrentUser(user);\r\n      } else {\r\n        setCurrentUser(null);\r\n        // If non-admin tries to stay signed in, sign them out\r\n        if (user && ADMIN_EMAILS.indexOf(user.email || '') === -1) {\r\n          signOut(auth);\r\n        }\r\n      }\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const isAdmin = currentUser !== null && ADMIN_EMAILS.indexOf(currentUser.email || '') !== -1;\r\n\r\n  const value: AuthContextType = {\r\n    currentUser,\r\n    loading,\r\n    signInWithGoogle,\r\n    logout,\r\n    isAdmin\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}